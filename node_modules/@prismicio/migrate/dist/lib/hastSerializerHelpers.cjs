"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const client = require("@prismicio/client");
const hastUtilToHtml = require("hast-util-to-html");
const PrismicRichTextSerializerError = require("../errors/PrismicRichTextSerializerError.cjs");
const serializeImage = (node) => {
  var _a, _b, _c, _d, _e;
  const src = (_a = node.properties) == null ? void 0 : _a.src;
  if (!src) {
    throw new PrismicRichTextSerializerError.PrismicRichTextSerializerError("Element of type `img` is missing an `src` attribute");
  }
  const url = new URL(src, "https://noop.com");
  let width = (_b = node.properties) == null ? void 0 : _b.width;
  let height = (_c = node.properties) == null ? void 0 : _c.height;
  let x = 0;
  let y = 0;
  let zoom = 1;
  if (url.hostname === "images.prismic.io") {
    if (url.searchParams.has("w")) {
      width = Number(url.searchParams.get("w"));
    }
    if (url.searchParams.has("h")) {
      height = Number(url.searchParams.get("h"));
    }
    if (url.searchParams.has("rect")) {
      const [rectX, rextY, rectW, _rectH] = url.searchParams.get("rect").split(",");
      x = Number(rectX);
      y = Number(rextY);
      if (width) {
        zoom = Math.max(1, width / Number(rectW));
      }
    }
  }
  return {
    type: "image",
    id: "",
    url: src,
    alt: ((_d = node.properties) == null ? void 0 : _d.alt) ?? "",
    copyright: ((_e = node.properties) == null ? void 0 : _e.copyright) ?? null,
    // This is not accurate. We're doing the casting because it seems the migration API
    // accepts `undefined` values for those fields which is more convenient to us here.
    // See: https://github.com/prismicio/prismic-client/pull/342#discussion_r1683650185
    dimensions: { width, height },
    edit: { x, y, zoom, background: "transparent" }
  };
};
const serializeEmbed = (node) => {
  var _a, _b, _c, _d;
  const src = (_a = node.properties) == null ? void 0 : _a.src;
  if (!src) {
    throw new PrismicRichTextSerializerError.PrismicRichTextSerializerError("Element of type `embed` is missing an `src` attribute");
  }
  const oembedBase = {
    version: "1.0",
    embed_url: src,
    html: hastUtilToHtml.toHtml(node),
    title: (_b = node.properties) == null ? void 0 : _b.title
  };
  const width = (_c = node.properties) == null ? void 0 : _c.width;
  const height = (_d = node.properties) == null ? void 0 : _d.height;
  node.children = [];
  if (width && height) {
    return {
      type: "embed",
      oembed: { ...oembedBase, type: client.OEmbedType.Rich, width, height }
    };
  } else {
    return {
      type: "embed",
      oembed: { ...oembedBase, type: client.OEmbedType.Link }
    };
  }
};
const serializeSpan = (node, rtPartialInlineNode) => {
  var _a, _b;
  if (rtPartialInlineNode.type === "hyperlink" && !("data" in rtPartialInlineNode)) {
    const url = (_a = node.properties) == null ? void 0 : _a.href;
    if (!url) {
      throw new PrismicRichTextSerializerError.PrismicRichTextSerializerError("Element of type `hyperlink` is missing an `href` attribute");
    }
    return {
      type: "hyperlink",
      data: {
        link_type: client.LinkType.Web,
        url,
        target: (_b = node.properties) == null ? void 0 : _b.target
      }
    };
  }
  return rtPartialInlineNode;
};
exports.serializeEmbed = serializeEmbed;
exports.serializeImage = serializeImage;
exports.serializeSpan = serializeSpan;
//# sourceMappingURL=hastSerializerHelpers.cjs.map
