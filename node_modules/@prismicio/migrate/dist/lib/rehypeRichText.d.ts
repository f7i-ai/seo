import type { CustomTypeModelRichTextField, RichTextField } from "@prismicio/client";
import type { Root } from "hast";
import type { Plugin } from "unified";
import type { HASTToRichTextConfig } from "./hastToRichText";
/**
 * Configuration options for {@link rehypeRichText}.
 */
export type RehypeRichTextConfig = {
    /**
     * A CSS selector that targets the section of the document to convert to rich
     * text.
     *
     * @example `div.post`
     *
     * @defaultValue `":root"` - The top-level element of the document.
     */
    container?: string;
    /**
     * A list of CSS selectors to exclude matching nodes from the document to
     * process.
     *
     * @example `[".hidden", "aside"]`
     *
     * @defaultValue `[]` - No nodes are excluded.
     */
    exclude?: string[];
    /**
     * A list of CSS selectors to include only matching nodes from the document to
     * process.
     *
     * @example `["p", "img"]`
     *
     * @defaultValue `[]` - All nodes are included.
     */
    include?: string[];
    /**
     * A rich text or title field model definition. When provided the serializer
     * will filter out any node types not allowed by the model.
     *
     * @defaultValue `undefined` - No filtering is applied.
     */
    model?: CustomTypeModelRichTextField;
} & HASTToRichTextConfig;
/**
 * A unified plugin that compiles a hast tree to a Prismic rich text field.
 *
 * @param config - Configuration options for the rehype rich text processor.
 */
export declare const rehypeRichText: Plugin<[
    config?: RehypeRichTextConfig
], Root, RichTextField>;
declare module "unified" {
    interface CompileResultMap {
        RichTextField: RichTextField;
    }
}
declare module "hast" {
    interface Element {
        /**
         * A serializer this node matches to. Nodes are marked with this property
         * when they match a CSS selector from the serializer map.
         */
        matchesSerializer?: string;
    }
}
