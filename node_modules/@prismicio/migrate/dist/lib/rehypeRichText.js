import { select, selectAll } from "hast-util-select";
import rehypeMinifyWhitespace from "rehype-minify-whitespace";
import { remove } from "unist-util-remove";
import { visit, SKIP } from "unist-util-visit";
import { filterRichTextField } from "./filterRichTextField.js";
import { hastToRichText } from "./hastToRichText.js";
const rehypeRichText = function rehypeRichText2(config) {
  const self = this;
  self.use(() => {
    return (tree) => {
      if (config == null ? void 0 : config.container) {
        const element = select(config.container, tree);
        if (!element) {
          throw new Error(`No container matching \`${config == null ? void 0 : config.container}\` could be found in the input AST.`);
        }
        tree.children = [element];
      }
      if (config == null ? void 0 : config.exclude) {
        const nodesToExclude = selectAll(config.exclude.join(", "), tree);
        remove(tree, (node) => nodesToExclude.includes(node));
      }
      if (config == null ? void 0 : config.include) {
        const nodesToInclude = [];
        const selector = config.include.join(", ");
        const rawNodesToInclude = selectAll(selector, tree);
        visit(tree, (node) => {
          if (rawNodesToInclude.includes(node)) {
            nodesToInclude.push(node);
            return SKIP;
          }
        });
        tree.children = nodesToInclude;
      }
      if (config == null ? void 0 : config.serializer) {
        for (const key in config.serializer) {
          if (!/^[a-z]+[1-6]?$/.test(key)) {
            const matches = selectAll(key, tree);
            for (let i = 0; i < matches.length; i++) {
              matches[i].matchesSerializer = key;
            }
          }
        }
      }
    };
  });
  self.use(rehypeMinifyWhitespace);
  self.compiler = compiler;
  function compiler(tree, file) {
    const richTextField = hastToRichText(tree, file, config);
    if (config == null ? void 0 : config.model) {
      return filterRichTextField(richTextField, config.model);
    }
    return richTextField;
  }
};
export {
  rehypeRichText
};
//# sourceMappingURL=rehypeRichText.js.map
