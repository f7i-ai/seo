import type { InjectMigrationSpecificTypes, RTInlineNode, RTNode, RTTextNode, RichTextField } from "@prismicio/client";
/**
 * Omits keys from a type, distributing the operation over a union.
 *
 * Taken from the `type-fest` package.
 *
 * @see https://github.com/sindresorhus/type-fest/blob/8a45ba048767aaffcebc7d190172d814a739feb0/source/distributed-omit.d.ts
 */
type DistributedOmit<ObjectType, KeyType extends keyof ObjectType> = ObjectType extends unknown ? Omit<ObjectType, KeyType> : never;
/**
 * An inline node without its `start` and `end` properties.
 */
export type RTPartialInlineNode = DistributedOmit<RTInlineNode, "start" | "end">;
export declare class RichTextFieldBuilder {
    #private;
    appendNode(node: InjectMigrationSpecificTypes<RTNode>): void;
    appendTextNode(type: RTTextNode["type"], direction?: "ltr" | "rtl"): void;
    appendSpan(span: InjectMigrationSpecificTypes<RTInlineNode>): void;
    appendSpan(partialSpan: InjectMigrationSpecificTypes<RTPartialInlineNode>, length: number): void;
    appendText(text: string): void;
    build(): RichTextField;
    /**
     * Cleans up the current last node.
     */
    private cleanupLast;
    /**
     * Determines if a node is a text node.
     *
     * @param node - rich text node to check.
     *
     * @returns `true` if `node` is a text node, `false` otherwise.
     */
    private isTextNode;
}
export {};
